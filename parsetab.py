
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDErightUMINUSMODULO INT DOUBLE PLUS MINUS TIMES DIVIDE AND OR EQUALS ASSIGN BRACE_OPEN BRACE_CLOSE ROUND_OPEN ROUND_CLOSE ARR_OPEN ARR_CLOSE SEMICOLON ID INT_TYPE DOUBLE_TYPE VOID_TYPE ELSE CHAR_TYPE PRINT IFmodule : MODULO ID bodybody : BRACE_OPEN lines BRACE_CLOSElines : line lines\n\t\t\t | lineline : assign SEMICOLON\n\t\t\t| declare SEMICOLON\n\t\t\t| print SEMICOLONprint : PRINT exprdeclare : type identifier\n\t\t\t   | type assigntype : INT_TYPE\n\t\t\t| DOUBLE_TYPE\n\t\t\t| CHAR_TYPE\n\t\t\t| VOID_TYPEassign : identifier ASSIGN exprexpr : ROUND_OPEN expr ROUND_CLOSEexpr : expr PLUS term\n\t\t\t| expr MINUS termexpr : termterm : term TIMES factor\n\t\t\t| term DIVIDE factorterm : factorfactor : INTfactor : DOUBLEfactor : identifierfactor : expridentifier : IDexpr : MINUS expr %prec UMINUSempty :'
    
_lr_action_items = {'TIMES':([14,22,23,24,25,26,28,35,40,41,42,43,44,45,46,47,],[-27,37,-24,-23,-26,-22,-25,-26,-26,-26,-26,-21,-20,37,37,-16,]),'CHAR_TYPE':([5,16,21,30,34,],[6,6,-6,-7,-5,]),'VOID_TYPE':([5,16,21,30,34,],[8,8,-6,-7,-5,]),'DIVIDE':([14,22,23,24,25,26,28,35,40,41,42,43,44,45,46,47,],[-27,36,-24,-23,-26,-22,-25,-26,-26,-26,-26,-21,-20,36,36,-16,]),'SEMICOLON':([11,14,15,18,22,23,24,25,26,28,32,33,35,41,42,43,44,45,46,47,],[21,-27,30,34,-19,-24,-23,-8,-22,-25,-10,-9,-15,-26,-26,-21,-20,-17,-18,-16,]),'DOUBLE':([12,19,27,29,36,37,38,39,],[23,23,23,23,23,23,23,23,]),'INT':([12,19,27,29,36,37,38,39,],[24,24,24,24,24,24,24,24,]),'DOUBLE_TYPE':([5,16,21,30,34,],[13,13,-6,-7,-5,]),'ROUND_CLOSE':([14,22,23,24,26,28,40,41,42,43,44,45,46,47,],[-27,-19,-24,-23,-22,-25,47,-26,-26,-21,-20,-17,-18,-16,]),'ASSIGN':([7,14,33,],[19,-27,19,]),'PLUS':([14,22,23,24,25,26,28,35,40,41,42,43,44,45,46,47,],[-27,-19,-24,-23,38,-22,-25,38,38,-26,38,-21,-20,-17,-18,-16,]),'INT_TYPE':([5,16,21,30,34,],[9,9,-6,-7,-5,]),'ROUND_OPEN':([12,19,27,29,36,37,38,39,],[27,27,27,27,27,27,27,27,]),'PRINT':([5,16,21,30,34,],[12,12,-6,-7,-5,]),'MODULO':([0,],[1,]),'BRACE_CLOSE':([10,16,21,30,31,34,],[20,-4,-6,-7,-3,-5,]),'MINUS':([12,14,19,22,23,24,25,26,27,28,29,35,36,37,38,39,40,41,42,43,44,45,46,47,],[29,-27,29,-19,-24,-23,39,-22,29,-25,29,39,29,29,29,29,39,-26,39,-21,-20,-17,-18,-16,]),'ID':([1,5,6,8,9,12,13,16,17,19,21,27,29,30,34,36,37,38,39,],[3,14,-13,-14,-11,14,-12,14,14,14,-6,14,14,-7,-5,14,14,14,14,]),'BRACE_OPEN':([3,],[5,]),'$end':([2,4,20,],[0,-1,-2,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'body':([3,],[4,]),'term':([12,19,27,29,36,37,38,39,],[22,22,22,22,22,22,45,46,]),'expr':([12,19,27,29,36,37,38,39,],[25,35,40,41,42,42,42,42,]),'lines':([5,16,],[10,31,]),'module':([0,],[2,]),'declare':([5,16,],[11,11,]),'factor':([12,19,27,29,36,37,38,39,],[26,26,26,26,43,44,26,26,]),'print':([5,16,],[15,15,]),'line':([5,16,],[16,16,]),'identifier':([5,12,16,17,19,27,29,36,37,38,39,],[7,28,7,33,28,28,28,28,28,28,28,]),'type':([5,16,],[17,17,]),'assign':([5,16,17,],[18,18,32,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> module","S'",1,None,None,None),
  ('module -> MODULO ID body','module',3,'p_module','parser.py',35),
  ('body -> BRACE_OPEN lines BRACE_CLOSE','body',3,'p_body','parser.py',39),
  ('lines -> line lines','lines',2,'p_lines','parser.py',43),
  ('lines -> line','lines',1,'p_lines','parser.py',44),
  ('line -> assign SEMICOLON','line',2,'p_line','parser.py',51),
  ('line -> declare SEMICOLON','line',2,'p_line','parser.py',52),
  ('line -> print SEMICOLON','line',2,'p_line','parser.py',53),
  ('print -> PRINT expr','print',2,'p_print','parser.py',57),
  ('declare -> type identifier','declare',2,'p_declare','parser.py',61),
  ('declare -> type assign','declare',2,'p_declare','parser.py',62),
  ('type -> INT_TYPE','type',1,'p_type','parser.py',66),
  ('type -> DOUBLE_TYPE','type',1,'p_type','parser.py',67),
  ('type -> CHAR_TYPE','type',1,'p_type','parser.py',68),
  ('type -> VOID_TYPE','type',1,'p_type','parser.py',69),
  ('assign -> identifier ASSIGN expr','assign',3,'p_assign','parser.py',73),
  ('expr -> ROUND_OPEN expr ROUND_CLOSE','expr',3,'p_expr_group','parser.py',77),
  ('expr -> expr PLUS term','expr',3,'p_expr','parser.py',81),
  ('expr -> expr MINUS term','expr',3,'p_expr','parser.py',82),
  ('expr -> term','expr',1,'p_expr_term','parser.py',86),
  ('term -> term TIMES factor','term',3,'p_term','parser.py',90),
  ('term -> term DIVIDE factor','term',3,'p_term','parser.py',91),
  ('term -> factor','term',1,'p_term_factor','parser.py',95),
  ('factor -> INT','factor',1,'p_factorInt','parser.py',99),
  ('factor -> DOUBLE','factor',1,'p_factorDouble','parser.py',103),
  ('factor -> identifier','factor',1,'p_factorID','parser.py',107),
  ('factor -> expr','factor',1,'p_factorExpr','parser.py',111),
  ('identifier -> ID','identifier',1,'p_identifier','parser.py',115),
  ('expr -> MINUS expr','expr',2,'p_expr_uminus','parser.py',119),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',126),
]
